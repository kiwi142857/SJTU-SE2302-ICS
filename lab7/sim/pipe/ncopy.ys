#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Student name: 陈启炜
# ID： 522031910299
# Description: 
#     1. I unroll the loop by 6. 
#     2. I use iaddq ins to replace addq or subq.
#     3. I change the process to make the ins before ``andq %R, %R`` is rmmovq to get better prediction in the implement of hcl.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Loop header
	jmp Test

Loop:	
	iaddq $-6, %rdx
	jl Cleanup
	mrmovq 40(%rdi), %r13
	mrmovq 32(%rdi), %r12
	rmmovq %r13, 40(%rsi)
	andq %r13, %r13		# val <= 0?
	jle Loop5		# if so, goto Npos:
	iaddq $1, %rax		# count++
Loop5:
	rmmovq %r12, 32(%rsi)
	andq %r12, %r12		# val <= 0?
	jle Loop4		# if so, goto Npos:
	iaddq $1, %rax		# count++
Loop4:
	mrmovq 24(%rdi), %r11
	mrmovq 16(%rdi), %r10
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11		# val <= 0?
	jle Loop3		# if so, goto Npos:
	iaddq $1, %rax		# count++
Loop3:
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10		# val <= 0?
	jle Loop2		# if so, goto Npos:
	iaddq $1, %rax		# count++
Loop2:
	mrmovq 8(%rdi), %r9
	mrmovq (%rdi), %r8
	rmmovq %r9, 8(%rsi)	
	andq %r9, %r9		# val <= 0?
	jle Loop1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Loop1:
	rmmovq %r8, (%rsi)	
	andq %r8, %r8		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++

Npos:	
	iaddq $48, %rdi		# src++
	iaddq $48, %rsi		# dst++
Test:
	andq %rdx,%rdx		# len > 0?
	jg Loop			# if so, goto Loop:
	je Done

Cleanup:
	iaddq $5, %rdx
	je Add1
	iaddq $-1, %rdx
	je Add2
	iaddq $-1, %rdx
	je Add3
	iaddq $-1, %rdx
	je Add4
	mrmovq 32(%rdi), %r12
	mrmovq 24(%rdi), %r11
	mrmovq 16(%rdi), %r10	
	mrmovq 8(%rdi), %r9
	mrmovq (%rdi), %r8
	rmmovq %r12, 32(%rsi)
	andq %r12, %r12		# val <= 0?
	jle Add54
	iaddq $1, %rax
Add54:
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11		# val <= 0?
	jle Add53
	iaddq $1, %rax
Add53:
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10		# val <= 0?
	jle Add52
	iaddq $1, %rax
Add52:
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9		# val <= 0?
jle Add51
	iaddq $1, %rax
Add51:
	rmmovq %r8, (%rsi)
	andq %r8, %r8		# val <= 0?
	jle Done
	iaddq $1, %rax
	jmp Done

Add4:
	mrmovq 24(%rdi), %r11
	mrmovq 16(%rdi), %r10
	mrmovq 8(%rdi), %r9
	mrmovq (%rdi), %r8	
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11		# val <= 0?
	jle Add53
	iaddq $1, %rax
	jmp Add53
	rmmovq %r10, 16(%rsi)
	rmmovq %r9, 8(%rsi)
	rmmovq %r8, (%rsi)
	
	
Add3:
	mrmovq 16(%rdi), %r10	
	mrmovq 8(%rdi), %r9
	mrmovq (%rdi), %r8
	rmmovq %r10, 16(%rsi)	
	andq %r10, %r10		# val <= 0?
	jle Add32
	iaddq $1, %rax
Add32:
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9		# val <= 0?
	jle Add31
	iaddq $1, %rax
Add31:
	rmmovq %r8, (%rsi)
	andq %r8, %r8		# val <= 0?
	jle Done
	iaddq $1, %rax
	jmp Done

Add2: 
	mrmovq 8(%rdi), %r9
	mrmovq (%rdi), %r8	
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9		# val <= 0?
	jle Add21
	iaddq $1, %rax
Add21:
	rmmovq %r8, (%rsi)
	andq %r8, %r8		# val <= 0?
	jle Done
	iaddq $1, %rax
	jmp Done
Add1: 
	mrmovq (%rdi), %r8	
	rmmovq %r8, (%rsi)
	andq %r8, %r8		# val <= 0?
	jle Done
	iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
