                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f63804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Student name: 陈启炜
                            | # ID： 522031910299
                            | # Description: 
                            | #     1. I unroll the loop by 6. 
                            | #     2. I use iaddq ins to replace addq or subq.
                            | #     3. I change the process to make the ins before ``andq %R, %R`` is rmmovq to get better prediction in the implement of hcl.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: 705801000000000000   | 	jmp Test
                            | 
0x03b:                      | Loop:	
0x03b: c0f2faffffffffffffff | 	iaddq $-6, %rdx
0x045: 726c01000000000000   | 	jl Cleanup
0x04e: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x058: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x062: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x06c: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x06e: 718100000000000000   | 	jle Loop5		# if so, goto Npos:
0x077: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x081:                      | Loop5:
0x081: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x08b: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x08d: 71a000000000000000   | 	jle Loop4		# if so, goto Npos:
0x096: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0a0:                      | Loop4:
0x0a0: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0aa: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x0b4: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0be: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0c0: 71d300000000000000   | 	jle Loop3		# if so, goto Npos:
0x0c9: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0d3:                      | Loop3:
0x0d3: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0dd: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0df: 71f200000000000000   | 	jle Loop2		# if so, goto Npos:
0x0e8: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0f2:                      | Loop2:
0x0f2: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x0fc: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x106: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	
0x110: 6299                 | 	andq %r9, %r9		# val <= 0?
0x112: 712501000000000000   | 	jle Loop1		# if so, goto Npos:
0x11b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x125:                      | Loop1:
0x125: 40860000000000000000 | 	rmmovq %r8, (%rsi)	
0x12f: 6288                 | 	andq %r8, %r8		# val <= 0?
0x131: 714401000000000000   | 	jle Npos		# if so, goto Npos:
0x13a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x144:                      | Npos:	
0x144: c0f73000000000000000 | 	iaddq $48, %rdi		# src++
0x14e: c0f63000000000000000 | 	iaddq $48, %rsi		# dst++
0x158:                      | Test:
0x158: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x15a: 763b00000000000000   | 	jg Loop			# if so, goto Loop:
0x163: 730404000000000000   | 	je Done
                            | 
0x16c:                      | Cleanup:
0x16c: c0f20500000000000000 | 	iaddq $5, %rdx
0x176: 73db03000000000000   | 	je Add1
0x17f: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x189: 738003000000000000   | 	je Add2
0x192: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x19c: 73fc02000000000000   | 	je Add3
0x1a5: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1af: 738e02000000000000   | 	je Add4
0x1b8: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x1c2: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x1cc: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	
0x1d6: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x1e0: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x1ea: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x1f4: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x1f6: 710902000000000000   | 	jle Add54
0x1ff: c0f00100000000000000 | 	iaddq $1, %rax
0x209:                      | Add54:
0x209: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x213: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x215: 712802000000000000   | 	jle Add53
0x21e: c0f00100000000000000 | 	iaddq $1, %rax
0x228:                      | Add53:
0x228: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x232: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x234: 714702000000000000   | 	jle Add52
0x23d: c0f00100000000000000 | 	iaddq $1, %rax
0x247:                      | Add52:
0x247: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x251: 6299                 | 	andq %r9, %r9		# val <= 0?
0x253: 716602000000000000   | jle Add51
0x25c: c0f00100000000000000 | 	iaddq $1, %rax
0x266:                      | Add51:
0x266: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x270: 6288                 | 	andq %r8, %r8		# val <= 0?
0x272: 710404000000000000   | 	jle Done
0x27b: c0f00100000000000000 | 	iaddq $1, %rax
0x285: 700404000000000000   | 	jmp Done
                            | 
0x28e:                      | Add4:
0x28e: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x298: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x2a2: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x2ac: 50870000000000000000 | 	mrmovq (%rdi), %r8	
0x2b6: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x2c0: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x2c2: 712802000000000000   | 	jle Add53
0x2cb: c0f00100000000000000 | 	iaddq $1, %rax
0x2d5: 702802000000000000   | 	jmp Add53
0x2de: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x2e8: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x2f2: 40860000000000000000 | 	rmmovq %r8, (%rsi)
                            | 	
                            | 	
0x2fc:                      | Add3:
0x2fc: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	
0x306: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x310: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x31a: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	
0x324: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x326: 713903000000000000   | 	jle Add32
0x32f: c0f00100000000000000 | 	iaddq $1, %rax
0x339:                      | Add32:
0x339: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x343: 6299                 | 	andq %r9, %r9		# val <= 0?
0x345: 715803000000000000   | 	jle Add31
0x34e: c0f00100000000000000 | 	iaddq $1, %rax
0x358:                      | Add31:
0x358: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x362: 6288                 | 	andq %r8, %r8		# val <= 0?
0x364: 710404000000000000   | 	jle Done
0x36d: c0f00100000000000000 | 	iaddq $1, %rax
0x377: 700404000000000000   | 	jmp Done
                            | 
0x380:                      | Add2: 
0x380: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x38a: 50870000000000000000 | 	mrmovq (%rdi), %r8	
0x394: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x39e: 6299                 | 	andq %r9, %r9		# val <= 0?
0x3a0: 71b303000000000000   | 	jle Add21
0x3a9: c0f00100000000000000 | 	iaddq $1, %rax
0x3b3:                      | Add21:
0x3b3: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x3bd: 6288                 | 	andq %r8, %r8		# val <= 0?
0x3bf: 710404000000000000   | 	jle Done
0x3c8: c0f00100000000000000 | 	iaddq $1, %rax
0x3d2: 700404000000000000   | 	jmp Done
0x3db:                      | Add1: 
0x3db: 50870000000000000000 | 	mrmovq (%rdi), %r8	
0x3e5: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x3ef: 6288                 | 	andq %r8, %r8		# val <= 0?
0x3f1: 710404000000000000   | 	jle Done
0x3fa: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x404:                      | Done:
0x404: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x405:                      | End:
                            | #/* $end ncopy-ys */
0x405:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x408:                      | 	.align 8
0x408:                      | src:
0x408: 0100000000000000     | 	.quad 1
0x410: 0200000000000000     | 	.quad 2
0x418: fdffffffffffffff     | 	.quad -3
0x420: fcffffffffffffff     | 	.quad -4
0x428: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x430:                      | 	.align 16
0x430:                      | Predest:
0x430: fadebc0000000000     | 	.quad 0xbcdefa
0x438:                      | dest:
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458:                      | Postdest:
0x458: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x460:                      | .align 8
                            | # Run time stack
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
                            | 
0x4e0:                      | Stack:
