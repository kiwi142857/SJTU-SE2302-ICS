#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Student name: 陈启炜
# ID： 522031910299
# Description: 
#     1. I unroll the loop by 6. 
#     2. I use iaddq ins to replace addq or subq.
#     3. I change the process to make the ins before ``andq %R, %R`` is rmmovq to get better prediction in the implement of hcl.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Loop header
	jmp Test

Loop:	
	iaddq $-6, %rdx
	jl Cleanup
	mrmovq 40(%rdi), %r13
	mrmovq 32(%rdi), %r12
	rmmovq %r13, 40(%rsi)
	andq %r13, %r13		# val <= 0?
	jle Loop5		# if so, goto Npos:
	iaddq $1, %rax		# count++
Loop5:
	rmmovq %r12, 32(%rsi)
	andq %r12, %r12		# val <= 0?
	jle Loop4		# if so, goto Npos:
	iaddq $1, %rax		# count++
Loop4:
	mrmovq 24(%rdi), %r11
	mrmovq 16(%rdi), %r10
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11		# val <= 0?
	jle Loop3		# if so, goto Npos:
	iaddq $1, %rax		# count++
Loop3:
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10		# val <= 0?
	jle Loop2		# if so, goto Npos:
	iaddq $1, %rax		# count++
Loop2:
	mrmovq 8(%rdi), %r9
	mrmovq (%rdi), %r8
	rmmovq %r9, 8(%rsi)	
	andq %r9, %r9		# val <= 0?
	jle Loop1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Loop1:
	rmmovq %r8, (%rsi)	
	andq %r8, %r8		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++

Npos:	
	iaddq $48, %rdi		# src++
	iaddq $48, %rsi		# dst++
Test:
	andq %rdx,%rdx		# len > 0?
	jg Loop			# if so, goto Loop:
	je Done

Cleanup:
	iaddq $5, %rdx
	je Add1
	iaddq $-1, %rdx
	je Add2
	iaddq $-1, %rdx
	je Add3
	iaddq $-1, %rdx
	je Add4
	mrmovq 32(%rdi), %r12
	mrmovq 24(%rdi), %r11
	mrmovq 16(%rdi), %r10	
	mrmovq 8(%rdi), %r9
	mrmovq (%rdi), %r8
	rmmovq %r12, 32(%rsi)
	andq %r12, %r12		# val <= 0?
	jle Add54
	iaddq $1, %rax
Add54:
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11		# val <= 0?
	jle Add53
	iaddq $1, %rax
Add53:
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10		# val <= 0?
	jle Add52
	iaddq $1, %rax
Add52:
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9		# val <= 0?
jle Add51
	iaddq $1, %rax
Add51:
	rmmovq %r8, (%rsi)
	andq %r8, %r8		# val <= 0?
	jle Done
	iaddq $1, %rax
	jmp Done

Add4:
	mrmovq 24(%rdi), %r11
	mrmovq 16(%rdi), %r10
	mrmovq 8(%rdi), %r9
	mrmovq (%rdi), %r8	
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11		# val <= 0?
	jle Add53
	iaddq $1, %rax
	jmp Add53
	rmmovq %r10, 16(%rsi)
	rmmovq %r9, 8(%rsi)
	rmmovq %r8, (%rsi)
	
	
Add3:
	mrmovq 16(%rdi), %r10	
	mrmovq 8(%rdi), %r9
	mrmovq (%rdi), %r8
	rmmovq %r10, 16(%rsi)	
	andq %r10, %r10		# val <= 0?
	jle Add32
	iaddq $1, %rax
Add32:
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9		# val <= 0?
	jle Add31
	iaddq $1, %rax
Add31:
	rmmovq %r8, (%rsi)
	andq %r8, %r8		# val <= 0?
	jle Done
	iaddq $1, %rax
	jmp Done

Add2: 
	mrmovq 8(%rdi), %r9
	mrmovq (%rdi), %r8	
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9		# val <= 0?
	jle Add21
	iaddq $1, %rax
Add21:
	rmmovq %r8, (%rsi)
	andq %r8, %r8		# val <= 0?
	jle Done
	iaddq $1, %rax
	jmp Done
Add1: 
	mrmovq (%rdi), %r8	
	rmmovq %r8, (%rsi)
	andq %r8, %r8		# val <= 0?
	jle Done
	iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad 3
	.quad 4
	.quad -5
	.quad 6
	.quad 7
	.quad 8
	.quad -9
	.quad -10
	.quad 11
	.quad -12
	.quad -13
	.quad 14
	.quad -15
	.quad 16
	.quad 17
	.quad -18
	.quad 19
	.quad 20
	.quad -21
	.quad 22
	.quad 23
	.quad -24
	.quad 25
	.quad -26
	.quad -27
	.quad 28
	.quad -29
	.quad 30
	.quad 31
	.quad 32
	.quad -33
	.quad -34
	.quad -35
	.quad 36
	.quad -37
	.quad 38
	.quad -39
	.quad -40
	.quad 41
	.quad -42
	.quad -43
	.quad 44
	.quad 45
	.quad 46
	.quad 47
	.quad -48
	.quad 49
	.quad 50
	.quad -51
	.quad 52
	.quad -53
	.quad -54
	.quad -55
	.quad 56
	.quad 57
	.quad -58
	.quad -59
	.quad -60
	.quad -61
	.quad -62
	.quad -63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
